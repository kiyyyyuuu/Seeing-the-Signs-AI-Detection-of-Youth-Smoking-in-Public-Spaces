# -*- coding: utf-8 -*-
"""SmokerVSNonSmoker_InceptionResNetV2_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eSK3ylay-fjCiglYsPDJwn8LZUC1TW-F
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

import zipfile
import os

with zipfile.ZipFile("DATA SET.zip", 'r') as zip_ref:
    zip_ref.extractall("dataset")

dataset_path = "/content/DATA SET.zip"

import tensorflow as tf
print(tf.__version__)
from tensorflow.keras.applications import InceptionResNetV2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
import matplotlib.pyplot as plt
import os

IMAGE_SIZE = (299, 299)
BATCH_SIZE = 32
EPOCHS = 30
DATASET_DIR = "/content/dataset/DATA SET"

datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.3,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2
)

train_generator = datagen.flow_from_directory(
    DATASET_DIR,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training'
)

val_generator = datagen.flow_from_directory(
    DATASET_DIR,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation'
)


base_model = InceptionResNetV2(
    weights='imagenet',
    include_top=False,
    input_shape=(299, 299, 3)
)

for layer in base_model.layers:
    layer.trainable = False

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(256, activation='relu')(x)
x = BatchNormalization()(x)
x = Dropout(0.5)(x)
predictions = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=predictions)


model.compile(
    optimizer=Adam(learning_rate=1e-4),
    loss='binary_crossentropy',
    metrics=[
        'accuracy',
        tf.keras.metrics.Precision(name='precision'),
        tf.keras.metrics.Recall(name='recall'),
        tf.keras.metrics.AUC(name='auc')
    ]
)

callbacks = [
    ModelCheckpoint("best_model.keras", save_best_only=True, monitor='val_loss'),
    ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, verbose=1, min_lr=1e-6),
    EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True, verbose=1)
]


history = model.fit(
    train_generator,
    epochs=EPOCHS,
    validation_data=val_generator,
    callbacks=callbacks
)


print("\nEvaluating model on validation data:")
results = model.evaluate(val_generator)
for name, val in zip(model.metrics_names, results):
    print(f"{name}: {val:.4f}")


def plot_metrics(history):
    metrics = ['accuracy', 'loss']
    for metric in metrics:
        plt.figure()
        plt.plot(history.history[metric], label=f"train {metric}")
        plt.plot(history.history[f"val_{metric}"], label=f"val {metric}")
        plt.title(f"{metric.capitalize()} over Epochs")
        plt.xlabel("Epoch")
        plt.ylabel(metric.capitalize())
        plt.legend()
        plt.grid(True)
        plt.show()

plot_metrics(history)

import tensorflow as tf
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
import os

# === CONFIG ===
IMAGE_PATH = "/content/tesr1.jpeg"
IMAGE_SIZE = (299, 299)

model = tf.keras.models.load_model("best_model.keras")


img = image.load_img(IMAGE_PATH, target_size=IMAGE_SIZE)
img_array = image.img_to_array(img)
img_array = img_array / 255.0
img_array = np.expand_dims(img_array, axis=0)


prediction_prob = model.predict(img_array)[0][0]
threshold = 0.5
predicted_class = 1 if prediction_prob > threshold else 0


class_indices = train_generator.class_indices
index_to_label = {v: k for k, v in class_indices.items()}
predicted_label = index_to_label[predicted_class]

plt.imshow(img)
plt.axis('off')
plt.title(f"Predicted: {predicted_label} ({prediction_prob:.2f})")
plt.show()

import tensorflow as tf
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
import os

# === CONFIG ===
IMAGE_PATH = "/content/test2.jpeg"
IMAGE_SIZE = (299, 299)


model = tf.keras.models.load_model("best_model.keras")

img = image.load_img(IMAGE_PATH, target_size=IMAGE_SIZE)
img_array = image.img_to_array(img)
img_array = img_array / 255.0
img_array = np.expand_dims(img_array, axis=0)


prediction_prob = model.predict(img_array)[0][0]
threshold = 0.5
predicted_class = 1 if prediction_prob > threshold else 0


class_indices = train_generator.class_indices
index_to_label = {v: k for k, v in class_indices.items()}
predicted_label = index_to_label[predicted_class]

plt.imshow(img)
plt.axis('off')
plt.title(f"Predicted: {predicted_label} ({prediction_prob:.2f})")
plt.show()

